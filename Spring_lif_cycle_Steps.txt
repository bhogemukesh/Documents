Bean initialization process
This picture describes the process of loading beans into the application context.
"happens once" : 
1)Configuration : Starting point is definition of beans in beans XML file (but also works for programmatic configuration as well). 
2)Load: When the context gets initialized all configuration files and classes are loaded into the application. 
3)Merge: Since all these sources contain different representations of beans there needs to be a merging step that unifies bean definitions into one internal format.
4)Validation: After initialization of whole configuration it needs to be checked for errors and invalid configuration. 
5)Dependency Tree & Indexing: When the configuration is validated then a dependency tree is built and indexed.
6)Spring applies BeanFactoryPostProcessors (BFPP from now on). BFPP allows for custom modification of an application context’s bean definitions. 
Application contexts can auto-detect BFPP beans in their bean definitions and apply them before any other beans get created.
 Classic examples of BFPPs include PropertyResourceConfigurer and PropertyPlaceHolderConfigurer.
7) When this phase is over and Spring owns all the final bean definitions then the process leaves the ‘happens once’ part and enters ‘happens for each bean’ part.


‘happens for each bean’ : 
1)First thing that is performed is the evaluation of all SPEL expressions (Spring Expression Language)
2)SPEL is an expression language that supports querying and manipulating an object graph at runtime
3)Now,that all SPEL expressions are evaluated,Spring performs dependency injection (constructor and setter).
4)As a next step Spring applies BeanPostProcessors (BPP from now on).
5)BPP is a factory hook that allows for custom modification of new bean instances. 
6)Application contexts can autodetect BPP beans in their bean definitions and apply them to any beans subsequently created.
7)Calling postProcessBeforeInitialization and postProcessAfterInitialization provides bean life-cycle hooks from outside of 
  bean definition with no regard to bean type. 
8)To specify bean life-cycle hooks that are bean specific you can choose from three possible ways to do so (ordered with respect to execution priority):

a) @PostConstruct
Annotating method with JSR-250 annotation @PostConstruct
b) afterPropertiesSet
Implementing InitializingBean interface and providing implementation for the afterPropertiesSet method
c) init-method
Defining the init-method attribute of bean element in XML configuration file
When a bean goes through this process it gets stored in a store which is basically a map with bean ID as a key and bean object as a value. When all beans get processed the context is initialized and we can call getBean on the context and retrieve bean instances.


Bean destruction process

Whole process begins when ApplicationContext is closed (whether by calling method close explicitly or from container where the application is running).
When this happens all beans and the context itself are destroyed. 
Just like with bean initialization, Spring provides life-cycle hooks for beans destruction with three possible ways to do so (ordered with respect to execution priority):

a) @PreDestroy
Annotating method with JSR-250 annotation @PreDestroy
b) destroy
Implementing DisposableBean interface and providing implementation for the destroy method
c) destroy-method
Defining the destroy-method attribute of bean element in XML configuration file

IMP Catch for prototype bean : 

However there is one tricky part to this. 
When you are dealing with prototype bean an interesting behavior emerges upon context closing. 
After prototype bean is fully initialized and all initializing life-cycle hooks are executed, 
container hands over the reference and has no reference to this prototype bean since. 
This means that no destruction life-cycle hooks will be executed.